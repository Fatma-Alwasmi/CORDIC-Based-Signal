// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_fpga417_cordic_Pipeline_VITIS_LOOP_93_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_sin_V,
        current_cos_V,
        r_V_out,
        r_V_out_ap_vld,
        lhs_out,
        lhs_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [19:0] current_sin_V;
input  [19:0] current_cos_V;
output  [19:0] r_V_out;
output   r_V_out_ap_vld;
output  [19:0] lhs_out;
output   lhs_out_ap_vld;

reg ap_idle;
reg r_V_out_ap_vld;
reg lhs_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln93_fu_124_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] cordic_phase_V_address0;
reg    cordic_phase_V_ce0;
wire   [7:0] cordic_phase_V_q0;
wire   [0:0] tmp_fu_171_p3;
reg   [0:0] tmp_reg_304;
wire    ap_block_pp0_stage1_11001;
wire   [19:0] current_cos_V_4_fu_203_p3;
reg   [19:0] current_cos_V_4_reg_314;
wire   [19:0] current_sin_V_4_fu_211_p3;
reg   [19:0] current_sin_V_4_reg_319;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln93_fu_142_p1;
wire    ap_block_pp0_stage1;
reg   [19:0] lhs_fu_46;
wire   [19:0] select_ln1651_fu_243_p3;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [19:0] current_cos_V_1_fu_50;
reg   [19:0] current_sin_V_1_fu_54;
reg   [5:0] i_fu_58;
wire   [5:0] add_ln93_fu_130_p2;
wire    ap_block_pp0_stage1_01001;
wire   [4:0] trunc_ln1488_fu_147_p1;
wire   [19:0] trunc_ln1488cast_fu_151_p1;
wire   [19:0] trunc_ln1488cast8_fu_161_p1;
wire   [19:0] ashr_ln1488_1_fu_165_p2;
wire   [19:0] ashr_ln1488_fu_155_p2;
wire   [19:0] current_cos_V_3_fu_191_p2;
wire   [19:0] current_cos_V_2_fu_179_p2;
wire   [19:0] current_sin_V_3_fu_197_p2;
wire   [19:0] current_sin_V_2_fu_185_p2;
wire   [19:0] cordic_phase_V_load_cast_fu_227_p1;
wire   [19:0] sub_ln813_fu_237_p2;
wire   [19:0] add_ln813_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_fpga417_cordic_Pipeline_VITIS_LOOP_93_1_cordic_phase_V_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
cordic_phase_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cordic_phase_V_address0),
    .ce0(cordic_phase_V_ce0),
    .q0(cordic_phase_V_q0)
);

top_fpga417_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            current_cos_V_1_fu_50 <= current_cos_V;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            current_cos_V_1_fu_50 <= current_cos_V_4_reg_314;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            current_sin_V_1_fu_54 <= current_sin_V;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            current_sin_V_1_fu_54 <= current_sin_V_4_reg_319;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_58 <= 6'd0;
    end else if (((icmp_ln93_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_58 <= add_ln93_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lhs_fu_46 <= 20'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            lhs_fu_46 <= select_ln1651_fu_243_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        current_cos_V_4_reg_314 <= current_cos_V_4_fu_203_p3;
        current_sin_V_4_reg_319 <= current_sin_V_4_fu_211_p3;
        tmp_reg_304 <= current_sin_V_1_fu_54[32'd19];
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cordic_phase_V_ce0 = 1'b1;
    end else begin
        cordic_phase_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lhs_out_ap_vld = 1'b1;
    end else begin
        lhs_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        r_V_out_ap_vld = 1'b1;
    end else begin
        r_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln813_fu_231_p2 = (lhs_fu_46 + cordic_phase_V_load_cast_fu_227_p1);

assign add_ln93_fu_130_p2 = (i_fu_58 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ashr_ln1488_1_fu_165_p2 = $signed(current_sin_V_1_fu_54) >>> trunc_ln1488cast8_fu_161_p1;

assign ashr_ln1488_fu_155_p2 = $signed(current_cos_V_1_fu_50) >>> trunc_ln1488cast_fu_151_p1;

assign cordic_phase_V_address0 = zext_ln93_fu_142_p1;

assign cordic_phase_V_load_cast_fu_227_p1 = cordic_phase_V_q0;

assign current_cos_V_2_fu_179_p2 = (ashr_ln1488_1_fu_165_p2 + current_cos_V_1_fu_50);

assign current_cos_V_3_fu_191_p2 = (current_cos_V_1_fu_50 - ashr_ln1488_1_fu_165_p2);

assign current_cos_V_4_fu_203_p3 = ((tmp_fu_171_p3[0:0] == 1'b1) ? current_cos_V_3_fu_191_p2 : current_cos_V_2_fu_179_p2);

assign current_sin_V_2_fu_185_p2 = (current_sin_V_1_fu_54 - ashr_ln1488_fu_155_p2);

assign current_sin_V_3_fu_197_p2 = (ashr_ln1488_fu_155_p2 + current_sin_V_1_fu_54);

assign current_sin_V_4_fu_211_p3 = ((tmp_fu_171_p3[0:0] == 1'b1) ? current_sin_V_3_fu_197_p2 : current_sin_V_2_fu_185_p2);

assign icmp_ln93_fu_124_p2 = ((i_fu_58 == 6'd32) ? 1'b1 : 1'b0);

assign lhs_out = lhs_fu_46;

assign r_V_out = current_cos_V_1_fu_50;

assign select_ln1651_fu_243_p3 = ((tmp_reg_304[0:0] == 1'b1) ? sub_ln813_fu_237_p2 : add_ln813_fu_231_p2);

assign sub_ln813_fu_237_p2 = (lhs_fu_46 - cordic_phase_V_load_cast_fu_227_p1);

assign tmp_fu_171_p3 = current_sin_V_1_fu_54[32'd19];

assign trunc_ln1488_fu_147_p1 = i_fu_58[4:0];

assign trunc_ln1488cast8_fu_161_p1 = trunc_ln1488_fu_147_p1;

assign trunc_ln1488cast_fu_151_p1 = trunc_ln1488_fu_147_p1;

assign zext_ln93_fu_142_p1 = i_fu_58;

endmodule //top_fpga417_cordic_Pipeline_VITIS_LOOP_93_1
